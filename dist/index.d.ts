declare const replaceAll: (str: string, find: string, replace: string) => string;
declare const truncate: (str: string, length: number) => string;
declare const toTitleCase: (str: string) => string;
declare const filterString: (str: string, filter?: string | RegExp, replaceWith?: string, options?: string) => string;
declare const format: (template: string, ...args: any[]) => string;
declare const isPalindrome: (str: string) => boolean;
declare const reverse: (str: string) => string;
declare const removeSpaces: (str: string) => string;
declare const countOccurrences: (str: string, substring: string) => number;
declare const pad: (str: string, length: number, char: string) => string;
declare const capitalize: (str: string) => string;
declare const randomize: (str: string) => string;
declare const toCamelCase: (str: string) => string;
declare const toSnakeCase: (str: string) => string;
declare const toKebabCase: (str: string | null | undefined) => string;
declare const toPascalCase: (str: string | null) => string;
declare const toUpperCaseFirst: (str: string) => string;
declare const toLowerCaseFirst: (str: string) => string;
declare const removeSpecialCharacters: (str: string) => string;
declare const removeFirst: (str: any, n: any) => string;
declare const removeLast: (str: string, n: number) => string;
declare const removeWords: (str: string, words: string[]) => string;
declare const replaceWords: (str: string, words: {
    [key: string]: string;
}) => string;
declare const countWords: (str: string) => number;
declare const getWordCount: (str: string) => number;
declare const getLetterCount: (str: string) => number;
declare const getDigitCount: (str: string) => number;
declare const getSpecialCharCount: (str: string) => number;
declare const getFirstChar: (str: string) => string;
declare const getLastChar: (str: string) => string;
declare const getUniqueChars: (str: string) => string[];
declare const getLongestWord: (str: string) => string;
declare const getShortestWord: (str: string) => string;
declare const getCharFrequency: (str: string) => Map<string, number>;
declare const getStringDistance: (str: string, otherString: string) => number;
declare const getRandomSubstring: (str: string, length: number) => string;
declare const getAnagrams: (str: string) => string[];
declare const getMatchingWords: (str: string, dictionary: string[]) => string[];
declare const removeCharacters: (str: string, characters: string) => string;
declare const splitString: (str: string, delimiter: string) => string[];
declare const joinArray: (arr: string[], delimiter: string) => string;
declare const findIndex: (str: string, substring: string) => number;
declare const startsWith: (str: string, substring: string) => boolean;
declare const endsWith: (str: string, substring: string) => boolean;
declare const countWordsInString: (str: string) => number;
declare const longestContaining: (str: string, characters: string) => string;
declare const shortestContaining: (sentence: string, search: string) => string;
declare const commonSubstring: (str: string, n: number) => string | undefined;
declare const replaceMultiple: (str: string, replacements: {
    [key: string]: string;
}) => string;
declare const isValidNumber: (str: string) => boolean;
declare const getAllPosition: (str: string, substring: string) => number[];
declare const findAllIndexes: (str: string, substring: string) => number[];
declare const getCommonPrefix: (strings: string[]) => string;
declare const getCommonSuffix: (strings: string[]) => string;
declare const getLongestCommonSubstring: (str1: string, str2: string) => string;
declare const splitByWords: (text: string, separator?: string) => string[];
declare const splitByLines: (text: string, separator?: string) => string[];
declare const repeatString: (text: string, count: number) => string;
declare const insertString: (text: string, insertion: string, index: number) => string;
declare const wrapString: (text: string, wrapLength: number, wrapWith?: string) => string;
declare const substringBefore: (text: string, search: string) => string;
declare const substringAfter: (text: string, search: string) => string;
declare const substringBetween: (text: string, start: string, end: string) => string;
declare const leftPad: (text: string, length: number, padWith?: string) => string;
declare const rightPad: (text: string, length: number, padWith?: string) => string;
declare const sliceString: (text: string, start: number, end?: number) => string;
declare const splitAt: (text: string, index: number) => string[];
declare const getNthIndex: (text: string, searchString: string, n: number) => number;
declare const trimLeft: (text: string) => string;
declare const trimRight: (text: string) => string;
declare const trimBoth: (text: string) => string;
declare const removeDuplicates: (text: string) => string;
declare const contains: (text: string, search: string) => boolean;
export { capitalize, commonSubstring, contains, countOccurrences, countWords, countWordsInString, endsWith, filterString, findAllIndexes, findIndex, format, getAllPosition, getAnagrams, getCharFrequency, getCommonSuffix, getDigitCount, getFirstChar, getLastChar, getLetterCount, getLongestCommonSubstring, getLongestWord, getMatchingWords, getNthIndex, getRandomSubstring, getShortestWord, getSpecialCharCount, getStringDistance, getUniqueChars, getWordCount, insertString, isPalindrome, isValidNumber, joinArray, longestContaining, pad, randomize, removeCharacters, removeDuplicates, removeFirst, removeLast, removeSpaces, removeSpecialCharacters, removeWords, replaceAll, replaceMultiple, replaceWords, reverse, shortestContaining, splitByLines, splitByWords, splitString, startsWith, substringAfter, substringBefore, toCamelCase, toKebabCase, toLowerCaseFirst, toPascalCase, toSnakeCase, toTitleCase, toUpperCaseFirst, trimBoth, trimLeft, trimRight, truncate, wrapString, splitAt, sliceString, rightPad, leftPad, substringBetween, repeatString, getCommonPrefix, };
